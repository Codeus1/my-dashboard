"use client";

import { useAppDispatch, useAppSelector } from "@/store";
import {
  addOne,
  initCounterState,
  substractOne,
} from "@/store/counter/counterSlice";
import { useEffect } from "react";

interface Props {
  value?: number;
}
// Generated by https://quicktype.io
export interface CounterResponse {
  method: string;
  count: number;
}

const getApiCounter = async (): Promise<CounterResponse> => {
  const data = await fetch("/api/counter").then((res) => res.json());
  return data;
};

export const CartCounter = ({ value = 0 }: Props) => {
  /*
 * Estado del contador:
 * Se utiliza el hook useAppSelector de Redux Toolkit para obtener el estado del
 * contador del store Redux.

 * Se utiliza el hook useAppDispatch de Redux Toolkit para obtener la función
 * dispatch que se utilizará para enviar acciones al store Redux.
 */
  const count = useAppSelector((state) => state.counter.count);
  const dispatch = useAppDispatch();

  // useEffect(() => {
  //   dispatch( initCounterState(value) );
  // }, [dispatch, value]);


  /* ****************
   * Obtención del contador desde una API:
   * Se utiliza el hook useEffect para realizar una operación efecto secundario
   * cuando el componente se monta.
   */
  useEffect(() => {
    getApiCounter().then(({ count }) => 
    /*
     * Cuando se completa la solicitud y se recibe la respuesta, se despacha la 
     * acción initCounterState(count) para inicializar el estado del contador en
     * el store Redux con el valor recibido de la API. El valor count proviene 
     * de la respuesta de la API.
     */
      dispatch(initCounterState(count)));
  }, [dispatch]);

  return (
    <>
      <span className="text-9xl">{count}</span>
      <div className="flex">
        <button
          onClick={() => {
            dispatch(addOne());
          }}
          className="flex items-center justify-center p-2 rounded-xl bg-gray-900 text-white hover:bg-gray-600 transition-all w-[100px] mr-2"
        >
          +1
        </button>
        <button
          onClick={() => {
            dispatch(substractOne());
          }}
          className="flex items-center justify-center p-2 rounded-xl bg-gray-900 text-white hover:bg-gray-600 transition-all w-[100px] mr-2"
        >
          -1
        </button>
      </div>
    </>
  );
};
